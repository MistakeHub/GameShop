{"remainingRequest":"C:\\Users\\Mistake22\\source\\repos\\GameShop\\FrontEnd\\sitee\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Mistake22\\source\\repos\\GameShop\\FrontEnd\\sitee\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Mistake22\\source\\repos\\GameShop\\FrontEnd\\sitee\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Mistake22\\source\\repos\\GameShop\\FrontEnd\\sitee\\src\\components\\GameDetailComponent.vue?vue&type=template&id=f2425b4c&","dependencies":[{"path":"C:\\Users\\Mistake22\\source\\repos\\GameShop\\FrontEnd\\sitee\\src\\components\\GameDetailComponent.vue","mtime":1628854753696},{"path":"C:\\Users\\Mistake22\\source\\repos\\GameShop\\FrontEnd\\sitee\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Mistake22\\source\\repos\\GameShop\\FrontEnd\\sitee\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Mistake22\\source\\repos\\GameShop\\FrontEnd\\sitee\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Mistake22\\source\\repos\\GameShop\\FrontEnd\\sitee\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}